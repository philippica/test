{"version":3,"sources":["classes/loader.js","classes/tileMap.js","classes/camera.js","classes/keyboard.js","classes/hero.js","classes/game.js","App.js","index.js"],"names":["Loader","_this","this","Object","classCallCheck","loadImage","key","src","image","Image","promise","Promise","resolve","reject","onload","images","onerror","getImage","TileMap","getTile","layerIndex","columnIndex","rowIndex","layers","columns","isSolidTileAtXY","x","y","column","Math","floor","tileSize","row","reduce","res","layer","tile","getColumn","getRow","getX","getY","rows","Camera","map","width","height","follow","sprite","following","screenX","screenY","update","max","min","maxX","maxY","Keyboard","listenForEvents","keys","window","addEventListener","_onKeyDown","_onKeyUp","forEach","_keys","event","keyCode","preventDefault","isDown","Error","concat","LEFT","RIGHT","UP","DOWN","Hero","move","delta","dirX","dirY","SPEED","_collide","left","right","top","bottom","Game","context","init","asyncToGenerator","regenerator_default","a","mark","_callee","tiles","character","wrap","_context","prev","next","keyboard","loader","sent","tileAtlas","hero","camera","stop","drawLayer","startColumn","endColumn","startRow","endRow","offsetX","offsetY","drawImage","round","_drawGrid","beginPath","moveTo","lineTo","stroke","getDelta","elapsed","_previousElapsed","clearRect","App","props","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","start","state","isGameRunning","game","getContext","renderGame","setState","requestAnimationFrame","render","canvasRef","current","React","createRef","react_default","createElement","className","ref","Component","ReactDOM","src_App_0","document","getElementById"],"mappings":"oRAAqBA,EACnB,SAAAA,IAAc,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAF,GAAAE,KAIdG,UAAY,SAACC,EAAKC,GAChB,IAAMC,EAAQ,IAAIC,MACZC,EAAU,IAAIC,QAAQ,SAACC,EAASC,GACpCL,EAAMM,OAAS,WACbb,EAAKc,OAAOT,GAAOE,EACnBI,EAAQJ,IAGVA,EAAMQ,QAAU,WACdH,EAAO,yBAA2BN,MAKtC,OADAC,EAAMD,IAAMA,EACLG,GAlBKR,KAqBde,SAAW,SAAAX,GACT,OAAOA,KAAOL,EAAKc,OAASd,EAAKc,OAAOT,GAAO,MArB/CJ,KAAKa,OAAS,ICFGG,EACnB,SAAAA,IAAc,IAAAjB,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAgB,GAAAhB,KAiCdiB,QAAU,SAACC,EAAYC,EAAaC,GAClC,OAAOrB,EAAKsB,OAAOH,GAAYE,EAAWrB,EAAKuB,QAAUH,IAlC7CnB,KAqCduB,gBAAkB,SAACC,EAAGC,GACpB,IAAMC,EAASC,KAAKC,MAAMJ,EAAIzB,EAAK8B,UAC7BC,EAAMH,KAAKC,MAAMH,EAAI1B,EAAK8B,UAIhC,OAAO9B,EAAKsB,OAAOU,OAAO,SAACC,EAAKC,EAAOf,GACrC,IAAMgB,EAAOnC,EAAKkB,QAAQC,EAAYQ,EAAQI,GAE9C,OAAOE,IADkB,IAATE,GAAuB,IAATA,KAE7B,IA/CSlC,KAkDdmC,UAAY,SAAAX,GACV,OAAOG,KAAKC,MAAMJ,EAAIzB,EAAK8B,WAnDf7B,KAsDdoC,OAAS,SAAAX,GACP,OAAOE,KAAKC,MAAMH,EAAI1B,EAAK8B,WAvDf7B,KA0DdqC,KAAO,SAAAX,GACL,OAAOA,EAAS3B,EAAK8B,UA3DT7B,KA8DdsC,KAAO,SAAAR,GACL,OAAOA,EAAM/B,EAAK8B,UA9DlB7B,KAAKsB,QAAU,GACftB,KAAKuC,KAAO,GACZvC,KAAK6B,SAAW,GAChB7B,KAAKqB,OAAS,CAAC,CACb,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChC,CACD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EA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","file":"static/js/main.7d0b1f00.chunk.js","sourcesContent":["export default class Loader {\r\n  constructor() {\r\n    this.images = {};\r\n  }\r\n\r\n  loadImage = (key, src) => {\r\n    const image = new Image();\r\n    const promise = new Promise((resolve, reject) => {\r\n      image.onload = () => {\r\n        this.images[key] = image;\r\n        resolve(image);\r\n      };\r\n\r\n      image.onerror = () => {\r\n        reject(\"Could not load image: \" + src);\r\n      };\r\n    });\r\n\r\n    image.src = src;\r\n    return promise;\r\n  };\r\n\r\n  getImage = key => {\r\n    return key in this.images ? this.images[key] : null;\r\n  };\r\n}\r\n","export default class TileMap {\r\n  constructor() {\r\n    this.columns = 12;\r\n    this.rows = 12;\r\n    this.tileSize = 64;\r\n    this.layers = [[\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0,\r\n      1, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0,\r\n      1, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0,\r\n      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      1, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2,\r\n      1, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2,\r\n      1, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2,\r\n      1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0\r\n    ], [\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\r\n    ]];\r\n  }\r\n\r\n  getTile = (layerIndex, columnIndex, rowIndex) => {\r\n    return this.layers[layerIndex][rowIndex * this.columns + columnIndex];\r\n  }\r\n\r\n  isSolidTileAtXY = (x, y) => {\r\n    const column = Math.floor(x / this.tileSize);\r\n    const row = Math.floor(y / this.tileSize);\r\n\r\n    // tiles 3 and 5 are solid -- the rest are walkable\r\n    // loop through all layers and return TRUE if any tile is solid\r\n    return this.layers.reduce((res, layer, layerIndex) => {\r\n      const tile = this.getTile(layerIndex, column, row);\r\n      const isSolid = tile === 2 || tile === 5;\r\n      return res || isSolid;\r\n    }, false);\r\n  }\r\n\r\n  getColumn = x => {\r\n    return Math.floor(x / this.tileSize);\r\n  }\r\n\r\n  getRow = y => {\r\n    return Math.floor(y / this.tileSize);\r\n  }\r\n\r\n  getX = column => {\r\n    return column * this.tileSize;\r\n  }\r\n\r\n  getY = row => {\r\n    return row * this.tileSize;\r\n  }\r\n}\r\n","export default class Camera {\r\n  constructor(map, width, height) {\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.maxX = map.columns * map.tileSize - width;\r\n    this.maxY = map.rows * map.tileSize - height;\r\n  }\r\n\r\n  follow = sprite => {\r\n    this.following = sprite;\r\n    sprite.screenX = 0;\r\n    sprite.screenY = 0;\r\n  }\r\n\r\n  update = () => {\r\n    // assume followed sprite should be placed at the center of the screen\r\n    // whenever possible\r\n    this.following.screenX = this.width / 2;\r\n    this.following.screenY = this.height / 2;\r\n\r\n    // make the camera follow the sprite\r\n    this.x = this.following.x - this.width / 2;\r\n    this.y = this.following.y - this.height / 2;\r\n    // clamp values\r\n    this.x = Math.max(0, Math.min(this.x, this.maxX));\r\n    this.y = Math.max(0, Math.min(this.y, this.maxY));\r\n\r\n    // in map corners, the sprite cannot be placed in the center of the screen\r\n    // and we have to change its screen coordinates\r\n\r\n    // left and right sides\r\n    if (this.following.x < this.width / 2 ||\r\n        this.following.x > this.maxX + this.width / 2) {\r\n        this.following.screenX = this.following.x - this.x;\r\n    }\r\n    // top and bottom sides\r\n    if (this.following.y < this.height / 2 ||\r\n        this.following.y > this.maxY + this.height / 2) {\r\n        this.following.screenY = this.following.y - this.y;\r\n    }\r\n  };\r\n}\r\n","export default class Keyboard {\r\n  constructor() {\r\n    this.LEFT = 37;\r\n    this.RIGHT = 39;\r\n    this.UP = 38;\r\n    this.DOWN = 40;\r\n    this._keys = {};\r\n  }\r\n\r\n  listenForEvents = keys => {\r\n    window.addEventListener('keydown', this._onKeyDown);\r\n    window.addEventListener('keyup', this._onKeyUp);\r\n\r\n    keys.forEach(key => {\r\n      this._keys[key] = false;\r\n    });\r\n  }\r\n\r\n  _onKeyDown = event => {\r\n    const keyCode = event.keyCode;\r\n    if (keyCode in this._keys) {\r\n      event.preventDefault();\r\n      this._keys[keyCode] = true;\r\n    }\r\n  };\r\n\r\n  _onKeyUp = event => {\r\n    const keyCode = event.keyCode;\r\n    if (keyCode in this._keys) {\r\n      event.preventDefault();\r\n      this._keys[keyCode] = false;\r\n    }\r\n  };\r\n\r\n  isDown = keyCode => {\r\n    if (!keyCode in this._keys) {\r\n      throw new Error(`Keycode  ${keyCode} is not being listened to`);\r\n    }\r\n    return this._keys[keyCode];\r\n  };\r\n}\r\n","export default class Hero {\r\n  constructor(map, x, y, image) { \r\n    this.map = map;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = map.tileSize;\r\n    this.height = map.tileSize;\r\n    this.image = image;\r\n    this.SPEED = 256; // pixels per second\r\n  }\r\n\r\n  move = (delta, dirX, dirY) => {\r\n    // move camera\r\n    this.x += dirX * this.SPEED * delta;\r\n    this.y += dirY * this.SPEED * delta;\r\n\r\n    // check if we walked into a non-walkable tile\r\n    this._collide(dirX, dirY);\r\n\r\n    // clamp values\r\n    const maxX = this.map.columns * this.map.tileSize;\r\n    const maxY = this.map.rows * this.map.tileSize;\r\n    this.x = Math.max(0, Math.min(this.x, maxX));\r\n    this.y = Math.max(0, Math.min(this.y, maxY));\r\n  }\r\n\r\n  _collide = (dirX, dirY) => {\r\n    let row, column;\r\n    // -1 in right and bottom is because image ranges from 0..63\r\n    // and not up to 64\r\n    const left = this.x - this.width / 2;\r\n    const right = this.x + this.width / 2 - 1;\r\n    const top = this.y - this.height / 2;\r\n    const bottom = this.y + this.height / 2 - 1;\r\n\r\n    // check for collisions on sprite sides\r\n    const collision =\r\n        this.map.isSolidTileAtXY(left, top) ||\r\n        this.map.isSolidTileAtXY(right, top) ||\r\n        this.map.isSolidTileAtXY(right, bottom) ||\r\n        this.map.isSolidTileAtXY(left, bottom);\r\n    if (!collision) { return; }\r\n\r\n    if (dirY > 0) {\r\n        row = this.map.getRow(bottom);\r\n        this.y = -this.height / 2 + this.map.getY(row);\r\n    }\r\n    else if (dirY < 0) {\r\n        row = this.map.getRow(top);\r\n        this.y = this.height / 2 + this.map.getY(row + 1);\r\n    }\r\n    else if (dirX > 0) {\r\n        column = this.map.getColumn(right);\r\n        this.x = -this.width / 2 + this.map.getX(column);\r\n    }\r\n    else if (dirX < 0) {\r\n        column = this.map.getColumn(left);\r\n        this.x = this.width / 2 + this.map.getX(column + 1);\r\n    }\r\n};\r\n}\r\n","import Loader from \"./loader\";\r\nimport TileMap from \"./tileMap\";\r\nimport Camera from \"./camera\";\r\nimport Keyboard from \"./keyboard\";\r\nimport Hero from \"./hero\";\r\n\r\nexport default class Game {\r\n  constructor(context) {\r\n    this.context = context;\r\n    this.loader = new Loader();\r\n    this.map = new TileMap();\r\n    this.keyboard = new Keyboard();\r\n    this._previousElapsed = 0;\r\n  }\r\n\r\n  init = async () => {\r\n    this.keyboard.listenForEvents(\r\n      [this.keyboard.LEFT, this.keyboard.RIGHT, this.keyboard.UP, this.keyboard.DOWN]);\r\n    const tiles = await this.loader.loadImage(\"tiles\", \"./assets/tiles.png\");\r\n    const character = await this.loader.loadImage(\"character\", \"./assets/character.png\");\r\n    this.tileAtlas = this.loader.getImage(\"tiles\");\r\n    this.images = {\r\n      tiles,\r\n      character,\r\n    };\r\n    this.hero = new Hero(this.map, 30, 720, this.images.character);\r\n    this.camera = new Camera(this.map, 512, 512);\r\n    this.camera.follow(this.hero);\r\n  };\r\n\r\n  drawLayer = layerIndex => {\r\n    const startColumn = Math.floor(this.camera.x / this.map.tileSize);\r\n    const endColumn = startColumn + (this.camera.width / this.map.tileSize);\r\n    const startRow = Math.floor(this.camera.y / this.map.tileSize);\r\n    const endRow = startRow + (this.camera.height / this.map.tileSize);\r\n    const offsetX = -this.camera.x + startColumn * this.map.tileSize;\r\n    const offsetY = -this.camera.y + startRow * this.map.tileSize;\r\n\r\n    for (let columnIndex = startColumn; columnIndex < endColumn; columnIndex++) {\r\n      for (let rowIndex = startRow; rowIndex < endRow; rowIndex++) {\r\n        let tile = this.map.getTile(layerIndex, columnIndex, rowIndex);\r\n        const x = (columnIndex - startColumn) * this.map.tileSize + offsetX;\r\n        const y = (rowIndex - startRow) * this.map.tileSize + offsetY;\r\n        if (tile !== 0) { // 0 => empty tile\r\n          this.context.drawImage(\r\n            this.tileAtlas, // image\r\n            (tile - 1) * this.map.tileSize, // source x\r\n            0, // source y\r\n            this.map.tileSize, // source width\r\n            this.map.tileSize, // source height\r\n            Math.round(x),  // target x\r\n            Math.round(y), // target y\r\n            this.map.tileSize, // target width\r\n            this.map.tileSize // target height\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  _drawGrid = () => {\r\n    const width = this.map.columns * this.map.tileSize;\r\n    const height = this.map.rows * this.map.tileSize;\r\n    let x, y;\r\n\r\n    for (let row = 0; row < this.map.rows; row++) {\r\n      x = - this.camera.x;\r\n      y = row * this.map.tileSize - this.camera.y;\r\n      this.context.beginPath();\r\n      this.context.moveTo(x, y);\r\n      this.context.lineTo(width, y);\r\n      this.context.stroke();\r\n    }\r\n\r\n    for (let column = 0; column < this.map.columns; column++) {\r\n      x = column * this.map.tileSize - this.camera.x;\r\n      y = - this.camera.y;\r\n      this.context.beginPath();\r\n      this.context.moveTo(x, y);\r\n      this.context.lineTo(x, height);\r\n      this.context.stroke();\r\n    }\r\n  };\r\n\r\n  update = delta => {\r\n    // handle hero movement with arrow keys\r\n    let dirX = 0;\r\n    let dirY = 0;\r\n    if (this.keyboard.isDown(this.keyboard.LEFT)) { dirX = -1; }\r\n    if (this.keyboard.isDown(this.keyboard.RIGHT)) { dirX = 1; }\r\n    if (this.keyboard.isDown(this.keyboard.UP)) { dirY = -1; }\r\n    if (this.keyboard.isDown(this.keyboard.DOWN)) { dirY = 1; }\r\n\r\n    this.hero.move(delta, dirX, dirY)\r\n    this.camera.update();\r\n  };\r\n\r\n  getDelta = elapsed => {\r\n    // compute delta time in seconds -- also cap it\r\n    let delta = (elapsed - this._previousElapsed) / 1000.0;\r\n    delta = Math.min(delta, 0.25); // maximum delta of 250 ms\r\n    this._previousElapsed = elapsed;\r\n    return delta;\r\n  }\r\n\r\n  render(elapsed) {\r\n    this.context.clearRect(0, 0, 512, 512);\r\n    this.update(this.getDelta(elapsed));\r\n    // draw map background layer\r\n    this.drawLayer(0);\r\n\r\n    // draw main character\r\n    this.context.drawImage(\r\n      this.hero.image,\r\n      this.hero.screenX - this.hero.width / 2,\r\n      this.hero.screenY - this.hero.height / 2\r\n    );\r\n\r\n    // draw map top layer\r\n    this.drawLayer(1);\r\n\r\n    this._drawGrid();\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Game from './classes/game';\r\nimport \"./App.css\";\r\n\r\nconst CANVAS_WIDTH = 512;\r\nconst CANVAS_HEIGHT = 512;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isGameRunning: false\r\n    };\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.start();\r\n  };\r\n\r\n  start = async () => {\r\n    if (!this.state.isGameRunning) {\r\n      this.game = new Game(this.getContext());\r\n      await this.game.init();\r\n      this.renderGame();\r\n    }\r\n    this.setState(state => ({ isGameRunning: !state.isGameRunning }));\r\n  };\r\n\r\n  renderGame = () => {\r\n    requestAnimationFrame((elapsed) => {\r\n      this.game.render(elapsed);\r\n\r\n      if (this.state.isGameRunning) {\r\n        this.renderGame();\r\n      }\r\n    });\r\n  };\r\n\r\n  getContext = () => this.canvasRef.current.getContext(\"2d\");\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"header\">\r\n          Tilemaps examples (with React)\r\n        </div>\r\n        <div className=\"subheader\">\r\n          Collisions\r\n        </div>\r\n        <div className=\"subheader2\">\r\n          Use arrow keys to move\r\n        </div>\r\n        <div className=\"gameContainer\">\r\n          <canvas\r\n            ref={this.canvasRef}\r\n            width={CANVAS_WIDTH}\r\n            height={CANVAS_HEIGHT}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}